* Arrays and Strings

1. Implement an algorithm to determine if an array contains all unique
   characters. What if you can not use additional data structures?

Solution: Simply use an array to contains all unique letters. If a
later character appears in the array, then return 0.

Code:
#+BEGIN_SRC C
  #include <ctype.h>
  int all_unique_letters(char *s){
      int arr[26];
      for (; *s != NULL; s++) {
          if (arr[tolower(*s) - 'a'] == 1) {
              return 0;
          }
      }
      return 1;
  }
#+END_SRC

If additional data structure can not be used, we could use other
values to record the string like:

1. An number whose nth bit indicates the nth character.
2. An number whose nth prime factor indicates the nth character. 
  
However, these methods would cost more time than using the buffer array.

2. Write code to reverse C-style string.

Solution: Walk through the string both from the beginning and the end.

Code:
#+BEGIN_SRC C
  #include <string.h>
  int reverse(char *s) {
      int i, j, temp;
      for (i=0, j=strlen(s)-1; i < j; i++, j--) {
          temp = s[i];
          s[i] = s[j];
          s[j] = temp;
      }
      return 0;
  }
#+END_SRC
 
3. Design an algorithm and write code to remove the duplicate
   characters in a string without using any additional buffer. NOTE:
   one or two additional variables are fine. An extra copy of the
   string is not allowed. FOLLOW UP: Write the test cases for this
   method.

Solution: Iterate over the string add check if each character appears
in the buffer array.

Code:
#+BEGIN_SRC C
  #include <string.h>
  #define MAXLEN 100
  void removeDupChars(string *s) {
      int i, j, arr[MAXLEN];
      for (i = 0; i < MAXLEN; i++) {
          arr[i] = 0;
      }
      for (i = 0, j = 0; s[i] != NULL; i++) {
         if (arr[tolower(s[i]) - 'a'] == 0) {
             arr[tolower(s[i]) - 'a'] = 1;
             s[j++] = s[i];
         }
      }
      s[j] = '\0';
  }
#+END_SRC

4. Write a method to decide if two strings are anagrams.

Solution: Iterate over the strings and put the hash values of the
characters in the buffer arrays. Test if the buffer arrays are same.

5. Write a method to replace all spaces in a string with "%20".

Solution: Iterate over the string and replace all spaces.

6. Given an image represented by an N*N matrix, each pixel in the
   image is 4 byte, write a method to rotate the image by 90
   degrees. Can you do this in place?

Solution: Recusively rotate the matrix.

Code:
#+BEGIN_SRC C
  void rotateMatrixInplace(int **mat, int N) {
      if (N == 1 || N == 0) {
          return;
      }
      int i, temp, ind;
      int last = N-1;
      for (i = 0; i < N; i++) {
         temp = mat[0][i];
         ind = last - i;
         mat[0][i] = mat[ind][0];
         mat[ind][0] = mat[last][ind];
         mat[last][ind] = mat[i][last];
         mat[i][last] = temp;
      }
      rotateMatrixInplace(mat+N+1, N-2);
  }
#+END_SRC

7. Write an algorithm such that if an element in a matrix M*N is 0,
   its entire row and column is set to 0.

Solution: Iterate over the matrix to decide which rows and columns to
be set to 0. Then set them to 0.

8. Assume you have a method =isSubstring= which checks if one word is
   a substring of another. Given two strings s1 and s2, write code to
   check if s2 is a rotation of s1 using only one call to
   =isSubstring= (i.e., "waterbottle" is a rotation of "erbottlewat").
  
Solution: test if =s2= is a substring of =s1s1=.

Code:
#+BEGIN_SRC C
  #include <string.h>

  int isSubstring(const char *s1, const char *pattern);

  int isRotationString(const char *s1, const char *pattern){
      size_t length = strlen(s1);
      char s[2*length+1];
      strcpy(s, s1);
      strcat(s, s1);
      return isSubstring(pattern, s2);
  }
#+END_SRC
