* Linked List

1. Write code to remove duplicates in an unsorted linked list. FOLLOW
   UP: How would you solve this problem if a temporary buffer is not
   allowed?
  
Solution: Use a buffer array if the value is hashable. If a temporary
buffer is not allowed, brute force comparison takes O(n^2) complexity.

2. Implement an algorithm to find the nth element to last element of a
   singly linked list.
  
Solution: Use the slow and fast pointers trick. Fast pointer moves n
position ahead of the slow pointer. When the fast pointer reaches the
end, the slow pointer reaches the nth element to the end. Note NULL is
not the last element.

Code:
#+BEGIN_SRC C
struct linkedList *getNthNodeToEnd(struct linkedList *head, int n) {
    /* NULL is not the last element */ 
    struct linkedList *slow, *fast;
    for (fast = head; fast != NULL && n >= 0; fast = fast->next, n--)
        ;
    if (n >= 0) {
        return NULL;
    }
    for (slow = head; fast != NULL; fast = fast->next, slow = slow->next) 
        ;
    return slow; 
}
#+END_SRC

3. Implement an algorithm to delete a node in the middle of a singly
   linked list, given only access to that node. EXAMPLE: Input: the
   node 'c' from the linked list: a->b->c->d->e Result: nothing is
   returned, but the new linked list looks like a->b->d->e

Solution: Replace the current node with the next node.

Code:
#+BEGIN_SRC C
  void deleteCurrentNode(struct linkedList *current) {
      /* this can not be done if current is the last node */
      struct linkedList *next;
      if (current != NULL && (next = current->next) != NULL) {
          *current = *next;
          free((void *) next);
      }
  }
#+END_SRC

4. You have two numbers represented by a linked list, where each node
   contains a single digit. The digits are stored in reverse order,
   such that the 1’s digit is at the head of the list. Write a
   function that adds the two numbers and returns the sum as a linked
   list. EXAMPLE Input: (3 -> 1 -> 5) + (5 -> 9 -> 2) Output: 8 -> 0
   -> 8
  
Solution: Iterate over the list and sum the node values with carries.

Code:
#+BEGIN_SRC C
  struct linkedList *sumLinkedList(struct linkedList *l, struct linkedList *s) {
      struct linkedList *sum;
      int value, svalue, lvalue;
      int carry = 0;
      for (; l != NULL || s != NULL; l = l->next, s = s->next) {
          svalue = s == NULL ? 0 : s->label;
          lvalue = l == NULL ? 0 : l->label;
          value = svalue + lvalue + carry;
          value = value > 9 ? value-10 : value;
          carry = value > 9 ? 1 : 0;
          sum = add(sum, value);
      }
      return sum;
  }
#+END_SRC


5. Given a circular linked list, implement an algorithm which returns
   node at the beginning of the loop. DEFINITION Circular linked list:
   A (corrupt) linked list in which a node’s next pointer points to an
   earlier node, so as to make a loop in the linked list. EXAMPLE
   input: A -> B -> C -> D -> E -> C [the same C as earlier] output: C

Solution: Use slow and fast pointers trick. The fast pointer
moves twice faster than the slow pointer. In a circular linked list,
the slow and faster pointer will meet at a circular node. The
difference between steps is a multiple of the circular length, and the
remaining steps in the circular is the length of the non-circular
head.

Code:
#+BEGIN_SRC C
  struct linkedList * getFirstCircularNode(struct linkedList *clist) {
      struct linkedList *slow, *fast;
      slow = clist;
      fast = clist;
      while (slow != NULL && fast != NULL) {
          slow = slow->next;
          fast = fast->next;
          if (fast != NULL) {
              fast = fast->next;
          } else {
              return NULL;
          }
          if (slow == fast) {
              break;
          }
      }
      if (slow == NULL || fast == NULL) {
          return NULL;
      }
      while (clist != slow) {
          clist = clist->next;
          slow = slow->next;
      }
      return slow;
  }
#+END_SRC
